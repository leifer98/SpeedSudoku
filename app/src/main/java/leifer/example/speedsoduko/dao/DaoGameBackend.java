package leifer.example.speedsoduko.dao;

import androidx.annotation.NonNull;

import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import org.jetbrains.annotations.NotNull;

import android.app.Activity;
import android.content.Intent;
import android.os.Handler;


import java.util.Random;

import leifer.example.speedsoduko.OnlineGameActivity;
import leifer.example.speedsoduko.objects.Game;
import leifer.example.speedsoduko.objects.GameRequest;
import leifer.example.speedsoduko.objects.Queue;
import leifer.example.speedsoduko.objects.User;

public class DaoGameBackend {
    private static FirebaseDatabase db = FirebaseDatabase.getInstance();
    public static DatabaseReference myRef = db.getReference();
    public static DatabaseReference qRef = myRef.child("Classic").child("Queues").getRef();
    public static DatabaseReference grRef = myRef.child("Classic").child("GameRequests").getRef();
    public static DatabaseReference gRef = myRef.child("Classic").child("Games").getRef();
    public static DatabaseReference uRef = myRef.child("User").getRef();

    public static void removeGarbage(User gameUser) {
        removeQueues(gameUser);
        removeGameRequests(gameUser);
    }

    public static void removeQueues(User user) {
        qRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull @NotNull DataSnapshot snapshot) {
                for (DataSnapshot data : snapshot.getChildren()) {
                    Queue queue = data.getValue(Queue.class);
                    if (queue.getUser() == null) {
                        qRef.child(data.getKey()).removeValue();
                    } else if (queue.getUser().equals(user)) {
                        qRef.child(data.getKey()).removeValue();
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull @NotNull DatabaseError error) {

            }
        });
    }

    public static void removeGameRequests(User user) {
        grRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull @NotNull DataSnapshot snapshot) {
                for (DataSnapshot data : snapshot.getChildren()) {
                    GameRequest gr = data.getValue(GameRequest.class);

                    if (gr.getUserSender() == null || gr.getUserReceived() == null) {
                        grRef.child(data.getKey()).removeValue();
                    } else if (gr.getUserSender().equals(user)) {
                        grRef.child(data.getKey()).removeValue();
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull @NotNull DatabaseError error) {

            }
        });
    }

    public static void removeGames(User user) {
//        System.out.println("games removed for: "+user.getUserName());

        gRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull @NotNull DataSnapshot snapshot) {
                for (DataSnapshot data : snapshot.getChildren()) {
                    Game g = data.getValue(Game.class);

                    if (g.getGameUser1() == null || g.getGameUser2() == null) {
                        gRef.child(data.getKey()).removeValue();
                    } else if (g.getGameUser1().equals(user) || g.getGameUser2().equals(user)) {
                        gRef.child(data.getKey()).removeValue();
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull @NotNull DatabaseError error) {

            }
        });
    }

    public static Task<Void> updateGame(Game game) {
        return gRef.child(game.getGameKey()).setValue(game);
    }

    public static Object[] randomSudoku() {
        Random r = new Random();
        int[][][] solvedArray = {{{3,7,9,5,6,8,4,2,1},
                {4,5,1,9,3,2,8,7,6},
                {8,6,2,4,1,7,5,9,3},
                {9,2,4,8,5,3,1,6,7},
                {1,3,6,2,7,4,9,5,8},
                {7,8,5,1,9,6,2,3,4},
                {5,9,3,6,8,1,7,4,2},
                {6,4,8,7,2,5,3,1,9},
                {2,1,7,3,4,9,6,8,5}},

                {{1,7,8,9,2,6,3,4,5},
                        {9,4,3,8,5,1,7,2,6},
                        {6,5,2,4,7,3,8,9,1},
                        {7,2,4,5,6,8,9,1,3},
                        {5,1,9,3,4,2,6,8,7},
                        {3,8,6,1,9,7,2,5,4},
                        {2,3,1,6,8,5,4,7,9},
                        {8,9,5,7,3,4,1,6,2},
                        {4,6,7,2,1,9,5,3,8}},

                {{3,5,1,6,7,2,9,8,4},
                        {4,6,9,8,3,1,2,5,7},
                        {2,8,7,5,4,9,6,1,3},
                        {9,4,6,1,5,7,8,3,2},
                        {1,2,8,3,9,6,7,4,5},
                        {5,7,3,2,8,4,1,9,6},
                        {7,3,4,9,2,8,5,6,1},
                        {6,9,2,4,1,5,3,7,8},
                        {8,1,5,7,6,3,4,2,9}},

                {{9,4,6,1,5,7,3,8,2},
                        {1,2,8,3,9,6,4,7,5},
                        {5,7,3,2,8,4,9,1,6},
                        {3,5,1,6,7,2,8,9,4},
                        {4,6,9,8,3,1,5,2,7},
                        {2,8,7,5,4,9,1,6,3},
                        {6,9,2,4,1,5,7,3,8},
                        {8,1,5,7,6,3,2,4,9},
                        {7,3,4,9,2,8,6,5,1}},

                {{3,4,2,5,6,7,8,1,9},
                        {9,5,7,1,2,8,6,3,4},
                        {1,6,8,9,4,3,5,2,7},
                        {7,2,9,8,3,1,4,5,6},
                        {5,1,4,7,9,6,3,8,2},
                        {6,8,3,4,5,2,9,7,1},
                        {2,3,5,6,7,9,1,4,8},
                        {8,7,6,3,1,4,2,9,5},
                        {4,9,1,2,8,5,7,6,3}},

                {{7,4,5,3,9,6,2,1,8},
                        {1,9,6,2,8,4,7,5,3},
                        {8,3,2,1,5,7,4,9,6},
                        {3,7,8,4,1,5,9,6,2},
                        {4,2,9,7,6,3,1,8,5},
                        {5,6,1,9,2,8,3,7,4},
                        {9,8,4,6,7,2,5,3,1},
                        {2,5,7,8,3,1,6,4,9},
                        {6,1,3,5,4,9,8,2,7}},

                {{3,1,2,6,9,8,4,5,7},
                        {7,8,5,4,3,1,6,9,2},
                        {4,9,6,5,2,7,1,3,8},
                        {8,7,1,3,4,2,9,6,5},
                        {2,5,9,1,7,6,3,8,4},
                        {6,4,3,8,5,9,7,2,1},
                        {1,2,4,9,8,3,5,7,6},
                        {9,6,7,2,1,5,8,4,3},
                        {5,3,8,7,6,4,2,1,9}},

                {{8,1,7,9,2,6,3,4,5},
                        {3,9,4,8,5,1,7,2,6},
                        {2,6,5,4,7,3,8,9,1},
                        {4,7,2,5,6,8,9,1,3},
                        {9,5,1,3,4,2,6,8,7},
                        {6,3,8,1,9,7,2,5,4},
                        {7,4,6,2,1,9,5,3,8},
                        {1,2,3,6,8,5,4,7,9},
                        {5,8,9,7,3,4,1,6,2}}};
        int[][][] array = {{{3,0,9,0,0,0,4,0,1},
                {0,0,0,9,0,2,0,7,0},
                {0,0,2,4,1,7,5,0,0},
                {0,2,4,0,0,0,1,6,0},
                {0,0,0,2,0,4,0,0,8},
                {0,8,5,0,0,0,2,3,0},
                {0,0,3,6,8,1,7,0,0},
                {0,0,0,7,0,5,0,0,0},
                {2,0,7,0,0,0,6,0,5}},

                {{0,0,8,9,2,0,3,0,0},
                        {9,4,0,0,5,0,0,2,0},
                        {6,0,2,0,0,0,8,0,0},
                        {0,0,0,0,0,8,9,0,3},
                        {5,1,0,3,4,0,6,8,0},
                        {3,8,6,1,0,7,0,0,4},
                        {0,3,0,0,8,0,0,0,0},
                        {8,9,5,0,3,4,0,6,0},
                        {0,0,7,2,0,0,5,3,0}},

                {{0,0,0,0,0,0,9,8,4},
                        {4,0,0,8,0,0,2,5,0},
                        {0,8,0,0,4,9,0,0,3},
                        {9,0,6,1,5,7,8,0,2},
                        {0,0,0,0,0,0,0,4,0},
                        {0,0,0,0,8,0,1,9,6},
                        {0,3,4,9,2,8,5,6,0},
                        {6,0,2,0,1,5,3,7,0},
                        {0,0,5,0,6,0,0,0,0}},

                {{0,4,6,1,5,0,0,0,2},
                        {0,0,0,0,0,0,0,7,5},
                        {5,7,0,2,0,0,0,1,6},
                        {3,0,0,6,7,2,8,0,0},
                        {4,0,9,8,3,0,5,2,0},
                        {2,0,0,5,4,0,1,0,0},
                        {0,0,2,0,1,5,0,0,0},
                        {8,1,0,7,6,0,0,4,0},
                        {0,0,4,0,2,0,6,0,0}},

                {{0,0,0,5,6,0,0,1,9},
                        {9,0,0,0,0,0,6,3,0},
                        {0,0,8,0,0,3,0,0,0},
                        {0,0,9,8,3,0,4,0,0},
                        {5,0,4,7,0,6,0,0,0},
                        {6,0,0,0,0,0,0,0,1},
                        {2,3,0,6,0,9,1,4,8},
                        {8,7,0,0,0,0,0,0,5},
                        {4,9,0,2,8,5,7,6,0}},

                {{0,0,5,0,0,0,2,1,0},
                        {1,9,6,2,8,4,7,5,3},
                        {0,3,0,1,5,0,4,0,6},
                        {3,0,8,0,0,5,0,0,0},
                        {4,0,0,0,6,3,0,0,0},
                        {5,0,1,9,2,0,3,7,4},
                        {0,0,0,0,0,2,5,0,0},
                        {0,5,0,0,3,0,6,0,0},
                        {0,1,3,0,4,0,0,0,0}},

                {{0,0,0,0,9,0,0,5,0},
                        {0,8,5,4,0,0,0,0,0},
                        {4,0,6,0,0,0,1,0,8},
                        {0,7,0,0,4,0,9,0,5},
                        {0,0,0,1,7,0,3,8,0},
                        {6,0,0,8,0,0,0,0,0},
                        {1,0,0,9,0,3,0,0,0},
                        {9,6,7,2,0,5,8,4,0},
                        {0,3,8,7,0,4,2,1,9}},

                {{8,1,7,0,0,0,0,4,5},
                        {0,0,0,0,5,1,7,0,6},
                        {2,6,5,0,0,3,0,0,1},
                        {4,7,0,5,6,8,0,0,0},
                        {9,5,1,0,0,0,0,8,0},
                        {0,3,0,0,9,0,2,0,0},
                        {0,4,0,2,0,0,0,0,0},
                        {0,0,0,0,0,5,0,7,9},
                        {5,8,9,7,3,0,1,6,0}}};
        int i = r.nextInt(8);

        return new Object[]{array[i], solvedArray[i]};
    }

    public static Object[] sudokoGenerator() {
        String []data = {"070000043040009610800634900094052000358460020000800530080070091902100005007040802",
        "679518243543729618821634957794352186358461729216897534485276391962183475137945862",
        "301086504046521070500000001400800002080347900009050038004090200008734090007208103",
        "371986524846521379592473861463819752285347916719652438634195287128734695957268143",
        "048301560360008090910670003020000935509010200670020010004002107090100008150834029",
        "748391562365248791912675483421786935589413276673529814834962157296157348157834629",
        "008317000004205109000040070327160904901450000045700800030001060872604000416070080",
        "298317645764285139153946278327168954981453726645792813539821467872634591416579382",
        "040890630000136820800740519000467052450020700267010000520003400010280970004050063",
        "142895637975136824836742519398467152451328796267519348529673481613284975784951263",
        "561092730020780090900005046600000427010070003073000819035900670700103080000000050",
        "561492738324786195987315246659831427418279563273564819135928674746153982892647351",
        "310450900072986143906010508639178020150090806004003700005731009701829350000645010",
        "318457962572986143946312578639178425157294836284563791425731689761829354893645217",
        "800134902041096080005070010008605000406310009023040860500709000010080040000401006",
        "867134952241596783395872614978625431456318279123947865534769128619283547782451396",
        "165293004000001632023060090009175000500900018002030049098000006000000950000429381",
        "165293874974851632823764195489175263536942718712638549398517426241386957657429381",
        "000003610000015007000008090086000700030800100500120309005060904060900530403701008",
        "728493615349615827651278493186539742932847156574126389815362974267984531493751268",
        "405001068073628500009003070240790030006102005950000021507064213080217050612300007",
        "425971368173628594869543172241795836736182945958436721597864213384217659612359487",
        "960405100020060504001703006100004000490130050002007601209006038070218905600079000",
        "968425173723861594541793286157684329496132857832957641219546738374218965685379412",
        "904520070001890240002643000070960380000108700600000010090080000000750030000312569",
        "984521673361897245752643891175964382429138756638275914593486127216759438847312569",
        "001408006093520741000010520602080300007060000005039060064052109020000654500607083",
        "251478936893526741476913528642185397937264815185739462364852179728391654519647283",
        "007300054245080900003040070070960000000020760000801002008294016609108020000007003",
        "867319254245786931913542678472963185381425769596871342738294516659138427124657893",
        "005346170000000050000800009502930741070000003000700020090050632207600400600420007",
        "925346178786291354341875269562938741174562983839714526498157632217683495653429817",
        "320090400705021800001060372218037009500480700000005000670000280000873900804000107",
        "326798451745321896981564372218637549569482713437915628673149285152873964894256137",
        "000030007480960501063570820009610203350097006000005094000000005804706910001040070",
        "925831467487962531163574829749618253352497186618325794276189345834756912591243678",
        "087002010204017003006800705508001000640008100002050670439180007020900030700023091",
        "987532416254617983316849725578261349643798152192354678439185267821976534765423891",
        "040000008760020349000470500900000030000036702308947000000004010200700603690001000",
        "149653278765128349832479561976512834451836792328947156583264917214795683697381425",
        "007009050040000930059740080000016790083000002710000000830060020000395018605020070",
        "367289451248651937159743286524816793983574162716932845831467529472395618695128374",
        "620740100070100052508000370067300900090000060800970031002000006000800000450002003",
        "623745198974138652518269374267381945391524867845976231782493516136857429459612783",
        "627140503345206971089503602000700364793054018460008059056031097971005836834067105",
        "627149583345286971189573642518792364793654218462318759256831497971425836834967125",
        "720890500390460100000217890809002000204008000105049287610000028080020915950701040",
        "721893564398465172546217893869572431274138659135649287613954728487326915952781346",
        "803700000026000004097100203705000908901070040038401567170950800680210435352846000",
        "813724659526389174497165283745632918961578342238491567174953826689217435352846791",
        "206007905345092018000850060000509000708000450004083126420060580571200094860000200",
        "286317945345692718197854362612549873738126459954783126423961587571238694869475231",
        "700000000400708061100296847000001400801000030090600075080010006007052394935467010",
        "768145923429738561153296847576321489841579632392684175284913756617852394935467218",
        "900000002010060390083900100804095007130670049060041000302010050000500000541080030",
        "956134782417268395283957164824395617135672849769841523372416958698523471541789236",
        "005000060000006302040081597012038754000200810087014000120007680000092030954860200",
        "375429168891756342246381597612938754439275816587614923123547689768192435954863271",
        "709000100421000050300700008100000302908320000002070809070530400090000675000600093",
        "789256134421893756365714928157968342948321567632475819276539481893142675514687293",
        "001300002079000000020670903000967300750001049080503100040702530205806700107405060",
        "861359472379124856524678913412967385753281649986543127648792531235816794197435268",
        "600017400401003008059800721120000050000040800008020100004530007700090086263170000",
        "682917435471253968359864721127389654536741892948625173894536217715492386263178549",
        "800005047040008500000000630000000490590040002072006305980000273067804051030070000",
        "829365147643718529751492638318527496596143782472986315984651273267834951135279864",
        "400000070060850240000301065049078500007032008280009430120703004700010000006200009",
        "415926873963857241872341965349178526657432198281569437128793654794615382536284719",
        "500000260024086000807152300000600703003400006700098120030800600072000481000070000",
        "519734268324986517867152349481625793293417856756398124135849672972563481648271935",
        "604001035003450001521900000069807104250014007410090006000060010000039070070140503",
        "694281735783456921521973648369827154258614397417395286835762419146539872972148563",
        "420796050300280497879004612690005201538400009010369004983647025006150000100020346",
        "421796853365281497879534612694875231538412769712369584983647125246153978157928346",
        "080000090090502000003001408007090630000000001650020000900300080310040970002879013",
        "586437192194582367723961458247198635839654721651723849975316284318245976462879513",
        "005020040007090318106840070510000693300000700074230001050764189040001002081902030",
        "835127946427695318196843275512478693368519724974236851253764189749381562681952437",
        "000000065004056701070813940006005490500690000009042000062504179000000030000000628",
        "198427365234956781675813942826175493543698217719342856362584179987261534451739628",
        "790048060125976300040305720980657413007100856001000007006002135009701000010500000",
        "793248561125976384648315729982657413437129856561834297876492135359781642214563978",
        "290800300000000046786500200020000100100009482647000903875200004310645700009008000",
        "294816375531927846786534219928453167153769482647182953875291634312645798469378521",
        "180023000942500008060010092209840000608395040300067850806000027407002900001700004",
        "185923476942576138763418592259841763678395241314267859896154327437682915521739684",
        "908260351500094872002010409003000084154083007020000905760100040009006000001005090",
        "948267351516394872372518469693752184154983627827641935765139248289476513431825796",
        "950064037046081059001539080034106070865000020090028000500612000613470090000890005",
        "958264137346781259721539486234156978865947321197328564589612743613475892472893615",
        "070620509029400000680570000300000000806750093000086005000000170064030000005004032",
        "471623589529418367683579421357942816846751293192386745938265174264137958715894632",
        "790400801100780090000910402975821046000000785006504000207090034300200908009100627",
        "793452861124786593658913472975821346412369785836574219287695134361247958549138627",
        "600502000450093700030684090203800560001000002007025010005036400320750601976418053",
        "619572348458193726732684195293841567541967832867325914185236479324759681976418253",
        "870500060010000207640180509000001000120006075008072006000605008000004000904008621",
        "879523164315469287642187539467851392123946875598372416231695748786214953954738621",
        "032104070500300002000625000080061020007402608201780054640000030098003700723056001",
        "832194576516378492479625183384561927957432618261789354645817239198243765723956841",
        "480060001103008526065700080058200010004080300021679005006023907510946008009800000",
        "482365791173498526965712483758234619694581372321679845846123957517946238239857164",
        "030074096600398700008061340053007009400059070096002084000023600310040000862000437",
        "135274896624398751978561342253487169481659273796132584549723618317846925862915437",
        "000001000003006097061037500000709800830040001000020006740008610300060052000900003",
        "287591364453286197961437528624719835839645271175823946742358619398164752516972483",
        "001002003004000900296015048560008197009000054700950300400187600010500402900020005",
        "871492563354876921296315748563248197189763254742951386425187639618539472937624815",
        "003060005792051400006200009268719054030026978000000601050103090029004000800002003",
        "483967215792351486516248739268719354135426978947835621654173892329584167871692543",
        "049003825500709106361025007600590084800004309190370562008000691415986273970130450",
        "749613825582749136361825947623591784857264319194378562238457691415986273976132458",
        "026853700000000000053040096240076810319005460600134020064397180708502604002060079",
        "926853741471629358853741296245976813319285467687134925564397182798512634132468579",
        "468050702273140509009002463001860000090030001030000600980501200327600104016324908",
        "468953712273146589159782463741869325695237841832415697984571236327698154516324978",
        "000009038000005004350700091000400000407500020060020805500900006840001070036040009",
        "674219538192385764358764291285436917417598623963127845521973486849651372736842159",
        "604300090210079064905014270450003900000001000008000000032700080890206010506000000",
        "674382591213579864985614273451863927769421358328957146132745689897236415546198732",
        "591300200004062031000917508063005080100480003057000000000090610048270395000050870",
        "591348267784562931236917548463725189129486753857139426375894612648271395912653874",
        "309000050007003060081407200108900020700340910932068000004080090506704000003020607",
        "329816754457293861681457239148975326765342918932168475274681593596734182813529647",
        "406150083703200000508003200630700500157009024982500307049680702000900030071300009",
        "426157983793268145518493276634712598157839624982546317349681752265974831871325469",
        "100000809950018000300000076580906000003500000204700560000000081600004003830169045",
        "146327859957618432328495176581946327763582914294731568479253681615874293832169745",
        "000000000084500970291000008809100500753942060010000000002714000370080400100035700",
        "537896142684521973291473658829167534753942861416358297962714385375289416148635729",
        "243600950005201000706953802657009080804507029009030060501402700008016005092785004",
        "243678951985241376716953842657129483834567129129834567561492738478316295392785614",
        "001090000009080054080576900076925301130000007495700080608250070000000006943607020",
        "751394268369182754284576913876925341132468597495731682618253479527849136943617825",
        "030810070000067105710003084002085790807436000600792040160329000920571860573048910",
        "235814679489267135716953284342185796897436521651792348168329457924571863573648912",
        "690538072080000600030907085040000900006029051000751800904000010008610090003000740",
        "691538472587142639432967185145386927876429351329751864964273518758614293213895746",
        "100500007090830004800200100400010072000048351001302006204900715315007690000000023",
        "143569287792831564856274139438615972629748351571392846264983715315427698987156423",
        "072834069045020008000075020014080000867040003200300800523408000000003080486007310",
        "172834569945126738638975421314789652867542193259361847523418976791653284486297315",
        "907201000000000006010070250825019064749032800003508090302000501680300907500027638",
        "957261483238495176416873259825719364749632815163548792372986541681354927594127638",
        "008052070091040006705800400570083204600000017810764035156400320024030700387095641",
        "468952173291347586735816492579183264643529817812764935156478329924631758387295641",
        "037604250200300100009250008000700090902005031740130006090070604001060000526800903",
        "837614259254398167619257348183726495962485731745139826398572614471963582526841973",
        "006007208310082076700061430009018500105470060800203004000030680678095300000820750",
        "596347218314582976782961435439618527125479863867253194251734689678195342943826751",
        "000000840090207100017568903700000600040602000003000002030850271900036500001700006",
        "256391847398247165417568923729413658145682739863975412634859271972136584581724396",
        "000000048300100720840000003003002006017060200620580304000013402100600890004857001",
        "971236548356148729842795163583472916417369285629581374768913452135624897294857631",
        "760009001024810076001706902600905018005030607800060295200600700400357009530090800",
        "768529431924813576351746982642975318195238647873461295219684753486357129537192864",
        "210089357090002800004700912341506200509004001600800430070325060100007589065910020",
        "216489357793152846854763912341576298589234671627891435978325164132647589465918723"};

        Random rand = new Random();
        int num = rand.nextInt(data.length/2)*2;
        String string = data[num];
        String stringSolved = data[num+1];

        // comment below to start randomize sodukos
//        string = "216489357793152846854763912341576298589034671627891435978305164132647589465918723";
//        stringSolved = "216489357793152846854763912341576298589234671627891435978325164132647589465918723";
        int index = 0;
        int [][] array = new int[9][9];
        int [][] solvedArray = new int[9][9];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                array[i][j] = Character.getNumericValue(string.charAt(index));
                solvedArray[i][j] = Character.getNumericValue(stringSolved.charAt(index));
                index ++;
            }
        }

        return new Object[]{array, solvedArray};
    }

}
